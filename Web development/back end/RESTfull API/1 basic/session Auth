
const express = require('express');
const app = express();
const mongoose  = require("mongoose");
const bodyParser = require('body-parser');
const session = require('express-session');
const sessionStore = require('connect-mongodb-session')(session);


app.use(bodyParser.urlencoded({extended : true}));



// database  connection

const db_string = "mongodb://127.0.0.1:27017/myDB";

mongoose.connect(db_string, {useNewUrlParser : true, useUnifiedTopology: true}, (err)=> {
    if(!err)
        console.log("DB connected")
})



// make session store
const store = new sessionStore({
    uri : db_string,
    collection : "mysession"
})


app.use(session({
    secret : "secret key",
    resave : false,
    saveUninitialized : false,
    store : store
}));


// auth function

const isAuth =(req, res, next)=> {
    if(req.session.isAuth){
        next();
    }else{
        res.send("please login")
    }
}


// define model

const userSchema = mongoose.Schema({
    name : String,
    email : String,
    password : String
})

const userModel = mongoose.model('userModel', userSchema);



app.get('/', (req, res)=> {
    res.send("hello")
})



// register route
app.post('/register', (req, res)=> {
    const {name, email, password} = req.body;

    if(!name || !email || !password) return res.send("fill all the fields")
    
    userModel.findOne({email}, (err, result)=> {
        if(result) return res.send("email is already exist") 
        else{
            const data = new userModel({
                name,
                email,
                password
            });
        
            data.save()
                .then(user=> {
                    res.send("saved")
                })
                .catch(()=> {
                    res.send("Failed to saved")
                })

        }
    })   
})







// login route
app.post('/login', (req, res)=> {
   const {email, password} =  req.body;

   userModel.findOne({email})
    .then(user=> {
        if(!user) return res.send("Incorrect email")
        if(password != user.password) return res.send("incorrect password")

        req.session.isAuth = true;
        res.send("you are in login page")

    })
})

app.post('/logout', (req, res)=> {
    req.session.destroy((err)=> {
        if(err) throw err;
        res.send("success to logout")
    })
})

// authorized route
// in header on postman set token 
// auth-token    place token
app.get('/protected', isAuth,(req, res)=> {
  
        res.send("protected route has been appeared ")
})

app.listen(3000, ()=> {
    console.log("server is running...")
})


